generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String    @unique
  password               String
  image                  String    @default("no_image.webp")
  bio                    String    @default("Hey there!")
  instagram              String    @default("")
  facebook               String    @default("")
  linkedIn               String    @default("")
  whatsapp               String    @default("")
  emailVerified          Boolean   @default(false)
  emailVerificationToken String?
  changePasswordToken    String?
  blogs                  Blog[]
  comments               Comment[]
  likes                  Like[]
}

model Blog {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  image         String?
  imagePublicId String?
  category      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  User          User?     @relation(fields: [userId], references: [id])
  userId        String?   @db.ObjectId
  comments      Comment[]
  likes         Like[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  Blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?  @db.ObjectId
}

model Like {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
  Blog   Blog?   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String? @db.ObjectId
}
